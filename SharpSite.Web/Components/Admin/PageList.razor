@page "/admin/Pages"
@attribute [Authorize(Roles = Constants.Roles.AdminUsers)]
@inject IPageRepository PageRepository
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>@Localizer[SharedResource.sharpsite_pageadmin]</PageTitle>

<AdminPageTemplate Title="@Localizer[SharedResource.sharpsite_pageadmin]" Class="page-list-page">
    @* show a list of pages that are currently in use.  Each page record should be a link to a 'EditPage' page*@
    @foreach (var p in Pages)
    {
        <div class="page-item">
            <h5>@p.Title</h5>
            <p class="page-item-content">@p.Content</p>
            <a href="@($"/admin/EditPage/{p.Id}")" class="btn btn-primary">@Localizer[SharedResource.sharpsite_edit]</a>

            <button class="btn btn-danger" @onclick="() => DeletePage(p.Id)">@Localizer[SharedResource.sharpsite_delete]</button>
        </div>
    }

    @* add a button to create a new page *@
    <a href="/admin/EditPage" class="btn btn-primary">@Localizer[SharedResource.sharpsite_newpage]</a>
</AdminPageTemplate>

@code {
	IEnumerable<Page> Pages { get; set; } = Enumerable.Empty<Page>();

	protected override async Task OnInitializedAsync()
	{
			Pages = await PageRepository.GetPages();
	}

	private async Task DeletePage(int id)
	{
			await PageRepository.DeletePage(id);
			NavManager.NavigateTo("/admin/Pages",true);
	}
}
